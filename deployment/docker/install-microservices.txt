-- How to install Foundry MicroServices
-- requirements: docker machine


-- 1. Connect to Docker machine.

-- if using Foundry Docker QA VM...
-- In Hyper-V Manager select "Foundry QA Docker" VM and at the bottom switch to "Networking" tab
-- there you will see VM IP address, need to remember one for the "External Switch", for example: 10.0.1.13
-- in host Windows start either cmd or powershell
ssh [VM IP address] -l [user name]
-- for example: ssh 10.0.1.13 -l qatester
-- after entering password it should open linux ssh remote terminal


-- 2. Generate JWS Secret

docker run -it --rm truecommerce/foundry.core.security.tools /generatejwtsecret
-- remember JWT Secret Key somewhere, it will be used to configure MicroServices and Core


-- 3. Migrate Core DB data to Security MicroServices DB

-- this tool will automatically create Security MicroServices table in DB and migrate all the related data from old Core DB
-- make sure that you are specified appropriate microervices version
-- can share Core DB and Security MicroServices DB if needed, their tables do not overlap
-- press 'y' to continue when asked ... also can use optional /Y to skip all questions
-- also can use optional /skipcorecheck parameter to skip old Core Tenants integrity check ... usefull for huge db when upgrading
docker run -it --rm truecommerce/foundry.core.security.tools:[microservices version] /migratedb /sqlconnection:"[MicroServices DB connection string]" /coresqlconnection:"[Core DB connection string]]"


-- 4. Download deployment file

-- download Docker-Compose Foundry deployment file from TrueCommerce official github repository
-- use curl or any other utility to get file from url
curl -SL https://raw.githubusercontent.com/TrueCommerce/foundry.core/master/2.0/runtime/foundry.core-compose.yml -o foundry.core-compose.yml


-- 5. Configure deployment file

-- open foundry.core-compose.yml in nano editor (or any other installed editor)
nano foundry.core-compose.yml

-- assign rabbitmq default user name and password in the following lines:
      - RABBITMQ_DEFAULT_USER=<rabbitmq user>
      - RABBITMQ_DEFAULT_PASS=<rabbitmq password>
      - RabbitMQ__User=<rabbitmq user>
      - RabbitMQ__Password=<rabbitmq password>

-- set Security MicroServices DB connection string in the following lines
-- one for foundry.core.security.maintenance
-- and one for foundry_core_security_microservice
      - Foundry__Security__SQLConnection=Server=<Core DB connection string>

-- set JWT Secret
-- copy JWT Secret generated in step 2 into the following line
      - Foundry__Security__JwtSecret=<Jwt Secret>

-- replace Foundrty Microservice version with the appropriate one for testing / deployment
-- by default this file will container the latest official release (or beta before release)
    image: truecommerce/foundry.core.security.maintenance:0.9
    image: truecommerce/foundry.core.security.microservice:0.9

-- 5.1 Configure https (optional)
-- uncomment the following lines in foundry_core_security_microservice
-- note just remove # sign
      #- ASPNETCORE_URLS=https://+;http://+
      #- ASPNETCORE_Kestrel__Certificates__Default__Password=<certificate password>
      #- ASPNETCORE_Kestrel__Certificates__Default__Path=/https/<certificate file name>
    #volumes:
      #- <certificate folder path>:/https/

-- get real certificate or generate dev one as described in https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnetcore-docker-https.md
-- note: need to generate one inside docker VM or copy real one into docker VM
-- set <certificate password> to certificate password
-- set <certificate file name> to certificate (.pfx) file name
-- set <certificate folder path> to the path to the folder where certificate file stored

-- sample configuration
      - ASPNETCORE_URLS=https://+;http://+
      - ASPNETCORE_Kestrel__Certificates__Default__Password=test123
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - ~/.aspnet/https:/https/

-- replace
ports:
      - "30100:80"
-- with
ports:
      - "30100:443"
-- now security microservice will be available at the https://[host]:30100


-- exit and save file


-- 6. Deploy MicroServices

-- Deploy all microservices and detach
docker-compose -f foundry.core-compose.yml up -d

-- list all deployed services
docker container ls -a


-- 7. Test containers

-- Security MicroService
-- start any browser
-- open swagger playground for Security MicroService
http://[docker machine ip]:30100/swagger/index.html
-- show JSON string with healthcheck
http://[docker machine ip]:30100/healthcheck

-- Security Maintenance MicroService
docker container ls -a
-- find container id for truecommerce/foundry.core.security.maintenance
-- show service logs
docker logs [container id ... can use just a first few characters from id, do not have to copy the whole id]

-- Kibana UI
-- start any browser and go to
[docker machine ip]:5601
-- it should open Kibana UI (it can take a while to start Kibana, just refresh page if not started yet)
-- Foundry is using Kibana for logging
-- for more information about Kibana, please, visit official web site: https://www.elastic.co/products/kibana


-- 9. Stop and remove MicroServices (if needed)

-- to stop and remove microservices
docker-compose -f foundry.core-compose.yml down