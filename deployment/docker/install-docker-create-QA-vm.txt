-- How to create Docker Hyper-V VM for QA
-- requirements: Windows with Hyper-V support

-- 1. Enable Hyper-V Platform and Hyper-V Management Tools
https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v


-- 2. Create Ubuntu VM in Hyper-V
-- start Hyper-V Manager
Action -> Quick Create

-- select "Ubuntu 18.04.1 LTS" or later version if available

-- expand "More Options" at the bottom right corner
Enter VM name, e.g. "Foundry QA Docker"
Select network, "Default Switch"

Click "Create Virtual Machine"
-- Hyper-V Manager will download image from internet (if necessary) and will automatically create VM


-- 3. Configure VM if necessary
Click "Edit settings..."


-- 4. Connect to VM, configure and start Ubuntu installation
Click "Connect" to connect to VM and click "Start" button
-- Ubuntu installation will be started automatically

Select language -> Continue
Select Keyboard Layout -> Continue
Select / enter Location (for time zone) -> Continue
Enter user / computer information = > Continue
-- For example:
-- User Name: QA Tester
-- Your Computer's Name: Foundry-QA-VM
-- Username: qatester
-- Password: qa@test#123

== Select "Login Automatically", so will not need to enter password every time

-- it will start Ubuntu installation and system configuration
-- note: it might pop a dialog "Connect to Foundry QA Docker", just close it
-- after installation / configuration is finished, it will show dialog to do some configurations
-- just click Next -> Next -> Next -> done


-- 5. Remove unnecessary software
Ubuntu Desktop -> Show Applications (button at the bottom left) -> Ubuntu Software (usually on the second page)
-- as alternative can click "Ubuntu Software" button at the vertical panel at the left
Switch to "Installed" tab and uninstall all unnecessary software (games / editors / etc)


-- 6. Update system
Ubuntu Desktop -> Show Applications (button at the bottom left) -> Software Updater
-- it will automatically check for updates
Click "Install Now"
Click "Restart Now" after done


-- 7. Add External Hyper-V switch, so can access VM remotely

-- in Hyper-V manager
Action -> Virtual Switch Manager
-- at the right side select "External"
click "Create Virtual Switch"
-- assign a name, for example "External Switch"
-- make sure that "External Network" is selected
Select network adapter from drop-down (preferably WiFi if on notebook)
Ok - Yes

-- select "Foundry QA VM"
Settings...
-- select "Add Hardware" at the left side and "Network Adapter" at the right side
Add -> select "External Switch" from drop-down -> Ok
-- restart VM
Shutdown -> Start


-- 8. Install OpenSSH Server
-- it is used to access Linux terminal remotely through SSH client.

-- Ubuntu Desktop -> Show Applications (button at the bottom left) -> Terminal
-- can right-click on Terminal -> Add to Favorites, so it will add it to favorites bar

-- update packages info
sudo apt-get update
-- install open ssh server
sudo apt-get install openssh-server
-- check status
sudo service ssh status
-- modify ssh configuration if necessary
sudo nano /etc/ssh/sshd_config
-- if you added / modified ssh config, restart ssh service
sudo service ssh restart

-- test ssh
-- In Hyper-V Manager select "Foundry QA Docker" VM and at the bottom switch to "Networking" tab
-- there you will see VM IP address, need to remember one for the "External Switch", for example: 10.0.1.23
-- on host Windows system, start either cmd or powershell
ssh [VM IP address] -l [user name]
-- for example: ssh 10.0.1.23 -l qatester
-- after entering password it should open linux ssh remote terminal

-- note 1: highly recommend to install Cmder (http://cmder.net) console emulator for Windows
-- it is absolutely free and greatly improve powershell and cmd productivity

-- note 2: on my computer somehow copy-paste from host Windows into Hyper-V Ubuntu VM does not work (clipboard is not shared)
-- but using SSH instead of Ubuntu Desktop terminal solves the problem
-- since SSH terminal is just a regular program in Windows


-- 9. Install curl
-- curl is used to download files from internet from terminal
-- update packages info
sudo apt-get update
-- install open ssh server
sudo apt-get install curl


-- 10. Install Docker CE
-- either start terminal in Ubuntu desktop or remote ssh from host Windows

-- download Docker installation script
curl -fsSL https://get.docker.com -o get-docker.sh
-- execute Docker installation script
sudo sh get-docker.sh
-- add current user to the Docker group, so will not need to "sudo" when executing Docker commands
-- for examepl: sudo usermod -aG docker qatester
sudo usermod -aG docker [user name]
-- you might need to logout/login Ubuntu Desktop or ssh in order to take effect
-- test installation
docker version


-- 11 Install Docker-Compose
-- docker-compose is a tool that allows to deploy and configure a bunch of docker containers
-- using yaml configuration file
-- either start terminal in Ubuntu desktop or remote ssh from host Windows

-- download latest docker-compose
-- can check the latest version at https://github.com/docker/compose/releases
sudo curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
-- apply executable permissions to the binary
sudo chmod +x /usr/local/bin/docker-compose
-- if need create symlink (if cannot run docker-compose ... not found)
sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
-- test installation
docker-compose version


12. Test Docker containers
-- either start terminal in Ubuntu desktop or remote ssh from host Windows

-- start hello-world container
-- if it downloaded and started successfully, should see something like:
-- This message shows that your installation appears to be working correctly.
docker run hello-world:linux

-- list all containers
-- should see hello:world:linux container exited sometime ago
docker container ls -a
-- remove test container
-- no need for full id, can just use first couple of characters from id
docker container rm -f [container id]

-- list all images
-- should see hello-world image with "linux" tag
docker image ls -a
-- delete test image
-- no need for full id, can just use first couple of characters from id
docker image rm -f [image id or name:tag]


-- 13. Export VM
-- https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/deploy/export-and-import-virtual-machines
-- Shutdown VM
Select VM -> Action -> Export...
Select location -> Export