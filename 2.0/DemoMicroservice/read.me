--- Features ---
- Fully functional Order/OrderLine CRUD + Import/Export demo
- Containerized Microservice, IOC (Inversion of Control) design
- ASP.NET Core / .Net Standard
- BackEnd: Entity Framework Core / SQL server
- EndPoints: ASP.Net Core OData
- Supports generating Swagger Doc
- Swagger Playground UI support: http://localhost:8192/swagger
- HealthCheck support: http://localhost:8192/healthcheck
- Authentication / Authorization : pass-through using Foundry Core Security Microservice
  supports: JWT, Certificate based Authentication
  OData controllers: AuthorizedUser property
- Containerization: Docker: Debug, Production, HealthCheck
- Client: generated .Net Standard 2.0 dll, can be used in both .Net 4.7.x and .Net Core 1/2/3
- Unit Test: client integration tests, docker compatible
- uses Foundry SDK through referencing public NuGet packages from: https://www.nuget.org/packages?q=truecommerce


--- TODO ---
- add VS Code docker build / unit tests targets support
- move AuthenticationHandler and some ASP.NET initialization to Foundry SDK
- move some unit tests generic code to Foundry SDK
- add Foundry.Core.Logs.Gateway support for logging



--- Prerequisites ---
- VS 2017/19 or VS Code
- SQL server DB
- .Net Core 2.2 SDK


--- Configuration ---
DemoService.Microservice -> appsettings.json
SqlConnection - SQL connection string to empty demo database
Foundry:Security:RootUrl - Foundry Security Microservice Url Base

DemoService.IntegrationTests -> appsettings.json
JwtSecret - there development JwtSecret by default, but if using Core Microservices installed in docker,
need to set the same secret as the one used for installing Core Security Microservice.


--- start xunit tests ---
cd C:\Projects\foundry.core\2.0\DemoMicroservice\DemoService.IntegrationTests
dotnet test
-- or
dotnet test -l "trx;LogFileName=testresults.trx"
